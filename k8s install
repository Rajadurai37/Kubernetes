#!/bin/bash

sudo swapoff -a

rm -rfv /swap.img

sudo apt update


cat << EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

lsmod | grep overlay
lsmod | grep br_netfilter


 cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo install -m 0755 -d /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

sudo chmod a+r /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
sudo apt-get update

sudo apt-get install -y ca-certificates curl gnupg containerd.io

containerd config default | tee /etc/containerd/config.toml

sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

systemctl daemon-reload
systemctl enable containerd.service 
systemctl restart containerd.service

sudo apt-get install -y apt-transport-https ca-certificates curl net-tools wget vim bash-completion tcpdump

 curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
 
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
 
sudo apt-get update


apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl
 
 
systemctl enable kubelet.service 
systemctl restart kubelet.service 

modprobe br_netfilter
echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
echo 1 > /proc/sys/net/ipv4/ip_forward


# In master server
 
kubeadm init --pod-network-cidr=10.244.0.0/16

# copy the "Your Kubernetes control-plane has initialized successfully!" from starting to end.
#To start using your cluster: copy paste the command from the copied kebernetes initialized successfully
    # for eg: ( mkdir -p $HOME/.kube
 		sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
		sudo chown $(id -u):$(id -g) $HOME/.kube/config
		export KUBECONFIG=/etc/kubernetes/admin.conf ) this four lines.

# Allow firewall in security group, allow (All TCP) from everywhere in security group.

# In both slave servers

# Now paste the last two lines from the copied kebernetes initialized successfully
    # for eg: ( kubeadm join 172.31.33.65:6443 --token 20fjze.zh56x9rz19642gnf \
        --discovery-token-ca-cert-hash sha256:c0042131e8b157db29c95aada7678fcc61d4daa0363294695c54e58b7e6db6a0 )  this last two lines.
# In master server

# CNI (container network interface) to give network connection

wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

kubectl apply -f kube-flannel.yml

kubectl get node

